/* Wrapper for the entire component including supporting text */
.wrapper {
  display: flex; /* Changed from inline-flex to allow full width */
  flex-direction: column;
  position: relative; /* Make it a positioning context for absolute children */
  width: 100%;
  /* Define common text color variables here so supportingTextContainer can access them */
  --text-field-supporting-text-color: var(--md-sys-color-on-surface-variant);
  --text-field-error-text-color: var(--md-sys-color-error);
}

/* Base container styles (for the input field part) */
.container {
  display: flex; /* Use flex to layout label and inputContainer */
  flex-direction: column;
  position: relative;
  padding-top: 0; /* Label floats into this space */
  padding-bottom: 1px; /* Add small padding for non-focused state */
  /* height: 56px; Removed to allow dynamic height for multiline */
  min-height: 56px;
  box-sizing: border-box;
  background-color: var(--md-sys-color-surface-container-highest);
  border-bottom: var(--text-field-border-width) solid
    var(--md-sys-color-on-surface-variant);
  border-radius: 4px 4px 0 0; /* Top corners rounded */
  transition: background-color 0.2s ease, border-color 0.2s ease;
  --text-field-background: var(--md-sys-color-surface-container-highest);
  --text-field-border-color: var(--md-sys-color-on-surface-variant);
  --text-field-border-color-focus: var(--md-sys-color-primary);
  --text-field-border-color-error: var(--md-sys-color-error);
  --text-field-label-color: var(--md-sys-color-on-surface-variant);
  --text-field-label-color-focus: var(--md-sys-color-primary);
  --text-field-label-color-error: var(--md-sys-color-error);
  --text-field-input-color: var(--md-sys-color-on-surface);
  --text-field-disabled-opacity: 0.38;
  --text-field-border-width: 1px;
  --text-field-border-width-focus: 2px; /* Reverted to 2px */
}

.multilineContainer {
  /* Styles for the container when multiline is true */
}

/* New container for input and adornments */
.inputContainer {
  display: flex;
  align-items: center; /* Vertically align items by default */
  padding: 0 12px; /* Horizontal padding for the container */
  flex-grow: 1; /* Take remaining vertical space */
  position: relative; /* For positioning input/textarea */
  /* Adjust top/bottom padding to align text correctly with label states */
  /* --input-container-padding-bottom: 8px; */ /* Default bottom padding - REMOVED */
  padding-top: 8px; /* Space for floated label */
  /* padding-bottom: var(--input-container-padding-bottom); */ /* REMOVED - padding-bottom is now handled by .container */
}

.inputContainer.multiline {
  align-items: flex-start; /* Align items to the top for multiline */
  padding-top: 16px; /* Increase top padding for multiline to ensure label is above text */
}

/* Input element styles */
.input {
  composes: typescale-body-large from global;
  color: var(--text-field-input-color);
  border: none;
  background-color: transparent;
  padding: 12px 0 4px; /* Adjusted vertical padding */
  outline: none;
  width: 100%;
  box-sizing: border-box;
  z-index: 1;
}

/* Styles specific to the textarea element when multiline is true */
.textarea {
  composes: typescale-body-large from global;
  color: var(--text-field-input-color); /* Ensure color consistency */
  border: none; /* Ensure border consistency */
  background-color: transparent; /* Ensure background consistency */
  outline: none; /* Ensure outline consistency */
  width: 100%; /* Ensure width consistency */
  box-sizing: border-box; /* Ensure box-sizing consistency */
  z-index: 1; /* Ensure z-index consistency */
  height: auto;
  min-height: calc(56px - 16px); /* Adjust min-height based on container padding */
  resize: none;
  padding: 12px 0 4px; /* Adjusted vertical padding */
  overflow-y: hidden; /* Prevent mouse scrolling when overflowing */
}

.textarea.multiline {
  /* Specific padding adjustments for multiline textarea if needed,
     but inputContainer padding might be enough.
     The label floats into the inputContainer's padding.
     Ensure textarea content starts below the floated label.
     The inputContainer.multiline already increases padding-top.
  */
  /* padding-top: 0; */
  /* Reset textarea's own top padding if inputContainer handles it - Commented out as it might not be effective due to specificity or base padding */
}

/* Adornment styles */
.startAdornment,
.endAdornment {
  display: flex;
  align-items: center;
  color: var(--md-sys-color-on-surface-variant); /* Default color */
  /* Adjust padding/margin as needed */
  flex-shrink: 0; /* Prevent adornments from shrinking */
}

.startAdornment {
  margin-right: 8px; /* Space between start adornment and input */
}

.endAdornment {
  margin-left: 8px; /* Space between input and end adornment */
}

/* Adjust input padding when adornments are present */
.inputWithStartAdornment {
  /* No specific padding needed if container handles it */
}

.inputWithEndAdornment {
  /* No specific padding needed if container handles it */
}

/* Label styles */
.label {
  position: absolute;
  left: 12px;
  /* Adjust initial position based on inputContainer padding */
  top: 28px; /* (16px container padding + 24px line height / 2) approx */
  transform: translateY(-50%);
  color: var(--text-field-label-color);
  pointer-events: none;
  transition: top 0.2s ease, transform 0.2s ease, color 0.2s ease;
  z-index: 2;
  /* Adjust position based on start adornment */
  /* This might need JS or :has() selector if adornment width varies */
}

.multilineLabel {
  /* Styles for the label when multiline is true */
  /* Adjust top position to match single-line label's perceived vertical position. */
  /* This might cause the label to slightly overlap with the first line of multiline text
     if the text area's content starts very high, but ensures visual consistency
     for the initial label position across single and multiline modes.
  */
  top: 28px; /* Match .label's default top position */
}

/* Adjust label position if start adornment exists */
.container:has(.startAdornment) .label {
  /* Estimate adornment width + margin */
  left: calc(12px + 24px + 8px); /* Adjust 24px based on typical icon size */
}

/* Floating label styles */
.container:focus-within .label,
.container:has(
    .inputContainer .input[value]:not([value=""]):not(:placeholder-shown)
  )
  .label,
.container:has(
    .inputContainer .textarea[value]:not([value=""]):not(:placeholder-shown)
  )
  .label {
  top: 4px; /* Adjusted floating label position */
  transform: translateY(0) scale(0.75); /* Keep scale for floating effect */
  transform-origin: top left;
}

/* Ensure multiline label stays at the top */
.container.multiline:focus-within .label,
.container.multiline:has(
    .inputContainer .textarea[value]:not([value=""]):not(:placeholder-shown)
  )
  .label {
  top: 8px; /* Adjust to be closer to the top of the inputContainer padding */
  transform: translateY(0) scale(0.75);
}

.container:focus-within .label {
  color: var(--text-field-label-color-focus);
}

/* Container for supporting text, absolutely positioned below the wrapper */
.supportingTextContainer {
  /* Keep position absolute, but adjust top */
  position: relative; /* Change to relative to flow naturally */
  /* top: 100%; <- Remove */
  padding: 4px 12px 0; /* Add padding top, align horizontal with input */
  box-sizing: border-box;
  min-height: 1.25rem; /* Reserve space for one line of text */
  /* max-width: calc(100% - 24px); <- Remove, let it take full width */
}

/* Supporting text (description/error) styles */
/* Typography component handles styling for description and error text */

/* --- Filled Variant Specific Styles --- */
.filled {
  /* Marker class, styles are on .container */
}

/* Apply hover/focus directly to .container */
.container:hover {
  background-color: color-mix(
    in srgb,
    var(--text-field-background) 96%,
    var(--md-sys-color-on-surface) 4%
  );
}

.container:focus-within {
  border-bottom-width: var(--text-field-border-width-focus);
  border-bottom-color: var(--text-field-border-color-focus);
  padding-bottom: 0px; /* Reduce padding to compensate for thicker border */
}

/* .container:focus-within .inputContainer { */ /* REMOVED - No longer needed as padding adjustment is on .container */
/* Adjust padding to compensate for thicker border on the main container */
/* --input-container-padding-bottom: calc(
    8px -
    (var(--text-field-border-width-focus) - var(--text-field-border-width))
  ); */
/* } */

/* --- Invalid State --- */
.container.invalid {
  --text-field-border-color: var(--text-field-border-color-error);
  --text-field-label-color: var(--text-field-label-color-error);
  border-bottom-color: var(--text-field-border-color-error);
}

.container.invalid:focus-within {
  --text-field-border-color-focus: var(--text-field-border-color-error);
  --text-field-label-color-focus: var(--text-field-label-color-error);
  border-bottom-color: var(--text-field-border-color-error);
}

/* --- Disabled State --- */
.container.disabled {
  opacity: var(--text-field-disabled-opacity);
  pointer-events: none;
  background-color: color-mix(
    in srgb,
    var(--text-field-background) 100%,
    transparent calc(100% - var(--text-field-disabled-opacity) * 100%)
  );
  border-bottom-color: color-mix(
    in srgb,
    var(--text-field-border-color) 100%,
    transparent calc(100% - var(--text-field-disabled-opacity) * 100%)
  );
}

.container.disabled .label,
.container.disabled .startAdornment /* Disable adornment color */,
.container.disabled .endAdornment {
  /* Disable adornment color */
  color: color-mix(
    in srgb,
    var(--text-field-label-color) 100% /* Use label color as base for adornments too */,
    transparent calc(100% - var(--text-field-disabled-opacity) * 100%)
  );
}

.container.disabled .input,
.container.disabled .textarea {
  /* Disable textarea color too */
  color: color-mix(
    in srgb,
    var(--text-field-input-color) 100%,
    transparent calc(100% - var(--text-field-disabled-opacity) * 100%)
  );
}
